local url = "https://raw.githubusercontent.com/LoserGuy123/HServ/refs/heads/main/Status"
local success, result =
    pcall(
    function()
        return loadstring(game:HttpGet(url))()
    end
)

if not success then
    warn("Failed to load script: " .. tostring(result))
end

if getgenv().EnabledHL then
    local UILib = {}
    local Players = game:GetService("Players")
    local UserInputService = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")
    local RunService = game:GetService("RunService")
    local Lighting = game:GetService("Lighting")

    local Theme = {
        Background = Color3.fromRGB(10, 10, 10),
        Secondary = Color3.fromRGB(10, 10, 10),
        Accent = Color3.fromRGB(12, 12, 12),
        Purple = Color3.fromRGB(138, 43, 226),
        Text = Color3.fromRGB(230, 230, 230),
        Stroke = Color3.fromRGB(60, 60, 60),
        TabActive = Color3.fromRGB(15, 15, 15),
        Highlight = Color3.fromRGB(10, 10, 10),
        Shadow = Color3.fromRGB(10, 10, 10)
    }

    local function Tween(object, properties, duration, easingStyle, easingDirection)
        local tweenInfo =
            TweenInfo.new(
            duration or 0.2,
            easingStyle or Enum.EasingStyle.Quad,
            easingDirection or Enum.EasingDirection.Out
        )
        TweenService:Create(object, tweenInfo, properties):Play()
    end

    local function CreateShadow(parent)
        local shadow = Instance.new("ImageLabel")
        shadow.Name = "Shadow"
        shadow.BackgroundTransparency = 1
        shadow.Image = "rbxassetid://1316045217"
        shadow.ImageColor3 = Theme.Shadow
        shadow.ImageTransparency = 0.7
        shadow.Size = UDim2.new(1, 12, 1, 12)
        shadow.Position = UDim2.new(0, -6, 0, -6)
        shadow.ZIndex = parent.ZIndex - 1
        shadow.Parent = parent
        return shadow
    end

    local function HSVToRGB(h, s, v)
        local r, g, b
        local i = math.floor(h * 6)
        local f = h * 6 - i
        local p = v * (1 - s)
        local q = v * (1 - f * s)
        local t = v * (1 - (1 - f) * s)
        i = i % 6
        if i == 0 then
            r, g, b = v, t, p
        elseif i == 1 then
            r, g, b = q, v, p
        elseif i == 2 then
            r, g, b = p, v, t
        elseif i == 3 then
            r, g, b = p, q, v
        elseif i == 4 then
            r, g, b = t, p, v
        elseif i == 5 then
            r, g, b = v, p, q
        end
        return Color3.new(r, g, b)
    end

    function UILib:CreateWindow(title)
        local gui = Instance.new("ScreenGui")
        gui.Name = "HolyUI_" .. math.random(10000, 99999)
        gui.ResetOnSpawn = false
        gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
        gui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")

        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(0, 550, 0, 450)
        frame.Position = UDim2.new(0.5, -275, 0.5, -225)
        frame.BackgroundColor3 = Theme.Background
        frame.BackgroundTransparency = 0
        frame.BorderSizePixel = 0
        frame.ClipsDescendants = true
        frame.ZIndex = 5
        frame.Parent = gui

        CreateShadow(frame)

        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = frame

        local stroke = Instance.new("UIStroke")
        stroke.Thickness = 1.5
        stroke.Color = Theme.Stroke
        stroke.Transparency = 0.5
        stroke.Parent = frame

        local logo = Instance.new("ImageLabel")
        logo.Name = "Logo"
        logo.Size = UDim2.new(0, 28, 0, 28)
        logo.Position = UDim2.new(0, 6, 0, 5)
        logo.BackgroundTransparency = 1
        logo.Image = "rbxassetid://128615802252886"
        logo.ZIndex = 6
        logo.Parent = frame

        local topbar = Instance.new("Frame")
        topbar.Size = UDim2.new(1, 0, 0, 36)
        topbar.BackgroundColor3 = Theme.Secondary
        topbar.BorderSizePixel = 0
        topbar.ZIndex = 5
        topbar.Parent = frame

        local topbarCorner = Instance.new("UICorner")
        topbarCorner.CornerRadius = UDim.new(0, 8)
        topbarCorner.Parent = topbar

        local titleLabel = Instance.new("TextLabel")
        titleLabel.Size = UDim2.new(1, -80, 1, 0)
        titleLabel.Position = UDim2.new(0, 40, 0, 0)
        titleLabel.BackgroundTransparency = 1
        titleLabel.Text = title
        titleLabel.TextColor3 = Theme.Text
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        titleLabel.Font = Enum.Font.SourceSansBold
        titleLabel.TextSize = 16
        titleLabel.ZIndex = 5
        titleLabel.Parent = topbar

        local closeButton = Instance.new("TextButton")
        closeButton.Size = UDim2.new(0, 28, 0, 28)
        closeButton.Position = UDim2.new(1, -34, 0, 4)
        closeButton.BackgroundColor3 = Theme.Secondary
        closeButton.Text = "×"
        closeButton.TextColor3 = Theme.Text
        closeButton.Font = Enum.Font.SourceSansBold
        closeButton.TextSize = 18
        closeButton.ZIndex = 5
        closeButton.Parent = topbar

        local closeCorner = Instance.new("UICorner")
        closeCorner.CornerRadius = UDim.new(0, 6)
        closeCorner.Parent = closeButton

        local minimizeButton = Instance.new("TextButton")
        minimizeButton.Size = UDim2.new(0, 28, 0, 28)
        minimizeButton.Position = UDim2.new(1, -66, 0, 4)
        minimizeButton.BackgroundColor3 = Theme.Secondary
        minimizeButton.Text = "−"
        minimizeButton.TextColor3 = Theme.Text
        minimizeButton.Font = Enum.Font.SourceSansBold
        minimizeButton.TextSize = 18
        minimizeButton.ZIndex = 5
        minimizeButton.Parent = topbar

        local minimizeCorner = Instance.new("UICorner")
        minimizeCorner.CornerRadius = UDim.new(0, 6)
        minimizeCorner.Parent = minimizeButton

        local dragData = {active = false}
        topbar.InputBegan:Connect(
            function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragData.active = true
                    dragData.startPos = frame.Position
                    dragData.mouseStart = input.Position
                    Tween(topbar, {BackgroundColor3 = Theme.Highlight}, 0.1)
                end
            end
        )

        UserInputService.InputChanged:Connect(
            function(input)
                if dragData.active and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local delta = input.Position - dragData.mouseStart
                    frame.Position =
                        UDim2.new(
                        dragData.startPos.X.Scale,
                        dragData.startPos.X.Offset + delta.X,
                        dragData.startPos.Y.Scale,
                        dragData.startPos.Y.Offset + delta.Y
                    )
                end
            end
        )

        UserInputService.InputEnded:Connect(
            function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragData.active = false
                    Tween(topbar, {BackgroundColor3 = Theme.Secondary}, 0.1)
                end
            end
        )

        local minimized = false
        minimizeButton.MouseButton1Click:Connect(
            function()
                minimized = not minimized
                local targetSize = minimized and UDim2.new(0, 550, 0, 36) or UDim2.new(0, 550, 0, 450)
                Tween(frame, {Size = targetSize}, 0.25, Enum.EasingStyle.Sine)
            end
        )

        closeButton.MouseButton1Click:Connect(
            function()
                gui:Destroy()
            end
        )

        local isVisible = true
        UserInputService.InputBegan:Connect(
            function(input, gameProcessedEvent)
                if gameProcessedEvent then
                    return
                end
                if input.KeyCode == Enum.KeyCode.LeftAlt then
                    isVisible = not isVisible
                    gui.Enabled = isVisible
                    Tween(gui, {DisplayOrder = isVisible and 10 or 0}, 0.2)
                end
            end
        )

        local tabButtons = Instance.new("Frame")
        tabButtons.Size = UDim2.new(0, 120, 1, -42)
        tabButtons.Position = UDim2.new(0, 8, 0, 42)
        tabButtons.BackgroundTransparency = 1
        tabButtons.ZIndex = 5
        tabButtons.Parent = frame

        local tabListLayout = Instance.new("UIListLayout")
        tabListLayout.Padding = UDim.new(0, 6)
        tabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        tabListLayout.Parent = tabButtons

        local tabContent = Instance.new("Frame")
        tabContent.Size = UDim2.new(1, -136, 1, -48)
        tabContent.Position = UDim2.new(0, 128, 0, 42)
        tabContent.BackgroundTransparency = 1
        tabContent.ZIndex = 5
        tabContent.Parent = frame

        local tabs = {}
        local firstTab = nil

        function tabs:CreateTab(name)
            local button = Instance.new("TextButton")
            button.Size = UDim2.new(1, -8, 0, 32)
            button.BackgroundColor3 = Theme.Secondary
            button.BorderSizePixel = 0
            button.Text = name
            button.Font = Enum.Font.SourceSansSemibold
            button.TextSize = 14
            button.TextColor3 = Theme.Text
            button.AutoButtonColor = false
            button.ZIndex = 5
            button.Parent = tabButtons

            local buttonCorner = Instance.new("UICorner")
            buttonCorner.CornerRadius = UDim.new(0, 6)
            buttonCorner.Parent = button

            local indicator = Instance.new("Frame")
            indicator.Size = UDim2.new(0, 4, 0, 0)
            indicator.Position = UDim2.new(1, -4, 0.5, 0)
            indicator.AnchorPoint = Vector2.new(0, 0.5)
            indicator.BackgroundColor3 = Theme.Purple
            indicator.BorderSizePixel = 0
            indicator.Visible = false
            indicator.ZIndex = 5
            indicator.Parent = button

            local page = Instance.new("ScrollingFrame")
            page.Size = UDim2.new(1, -8, 1, -8)
            page.Position = UDim2.new(0, 4, 0, 4)
            page.CanvasSize = UDim2.new(0, 0, 0, 0)
            page.ScrollBarThickness = 4
            page.ScrollBarImageColor3 = Theme.Purple
            page.BackgroundTransparency = 1
            page.Visible = false
            page.ZIndex = 5
            page.Parent = tabContent

            local pageLayout = Instance.new("UIListLayout")
            pageLayout.Padding = UDim.new(0, 10)
            pageLayout.SortOrder = Enum.SortOrder.LayoutOrder
            pageLayout.Parent = page

            pageLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(
                function()
                    page.CanvasSize = UDim2.new(0, 0, 0, pageLayout.AbsoluteContentSize.Y + 16)
                end
            )

            if not firstTab then
                firstTab = {Button = button, Frame = page, Indicator = indicator}
            end

            local function selectTab()
                for _, v in pairs(tabContent:GetChildren()) do
                    if v:IsA("ScrollingFrame") then
                        v.Visible = false
                    end
                end
                page.Visible = true

                for _, v in pairs(tabButtons:GetChildren()) do
                    if v:IsA("TextButton") then
                        Tween(v, {BackgroundColor3 = Theme.Secondary}, 0.1)
                        v.TextColor3 = Theme.Text
                        local ind = v:FindFirstChildOfClass("Frame")
                        if ind then
                            Tween(ind, {Size = UDim2.new(0, 4, 0, 0)}, 0.1)
                            ind.Visible = false
                        end
                    end
                end

                Tween(button, {BackgroundColor3 = Theme.TabActive}, 0.1)
                button.TextColor3 = Theme.Purple
                indicator.Visible = true
                Tween(indicator, {Size = UDim2.new(0, 4, 0, 20)}, 0.25, Enum.EasingStyle.Sine)
            end

            button.MouseButton1Click:Connect(selectTab)

            button.MouseEnter:Connect(
                function()
                    if not page.Visible then
                        Tween(button, {BackgroundColor3 = Theme.Highlight}, 0.1)
                    end
                end
            )

            button.MouseLeave:Connect(
                function()
                    if not page.Visible then
                        Tween(button, {BackgroundColor3 = Theme.Secondary}, 0.1)
                    end
                end
            )

            return {Button = button, Frame = page}
        end

        -- Automatically select the first tab after all tabs are created
        local tabConnection
        tabConnection =
            tabButtons.ChildAdded:Connect(
            function(child)
                if child:IsA("TextButton") and firstTab and child == firstTab.Button then
                    task.defer(
                        function()
                            for _, v in pairs(tabContent:GetChildren()) do
                                if v:IsA("ScrollingFrame") then
                                    v.Visible = false
                                end
                            end
                            firstTab.Frame.Visible = true
                            Tween(firstTab.Button, {BackgroundColor3 = Theme.TabActive}, 0.1)
                            firstTab.Button.TextColor3 = Theme.Purple
                            firstTab.Indicator.Visible = true
                            Tween(firstTab.Indicator, {Size = UDim2.new(0, 4, 0, 20)}, 0.25, Enum.EasingStyle.Sine)
                            tabConnection:Disconnect()
                        end
                    )
                end
            end
        )

        return tabs
    end

    function UILib:CreateButton(frame, text, callback)
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(1, -16, 0, 36)
        btn.BackgroundColor3 = Theme.Secondary
        btn.BorderSizePixel = 0
        btn.Text = text
        btn.Font = Enum.Font.SourceSansSemibold
        btn.TextSize = 14
        btn.TextColor3 = Theme.Text
        btn.AutoButtonColor = false
        btn.ZIndex = 5
        btn.Parent = frame

        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 6)
        corner.Parent = btn

        local stroke = Instance.new("UIStroke")
        stroke.Thickness = 1.5
        stroke.Color = Theme.Stroke
        stroke.Transparency = 0.6
        stroke.Parent = btn

        btn.MouseEnter:Connect(
            function()
                Tween(btn, {BackgroundColor3 = Theme.Highlight}, 0.1)
            end
        )

        btn.MouseLeave:Connect(
            function()
                Tween(btn, {BackgroundColor3 = Theme.Secondary}, 0.1)
            end
        )

        btn.MouseButton1Click:Connect(
            function()
                Tween(btn, {BackgroundColor3 = Theme.Purple}, 0.1)
                task.wait(0.1)
                Tween(btn, {BackgroundColor3 = Theme.Secondary}, 0.25, Enum.EasingStyle.Sine)
                pcall(callback)
            end
        )

        return btn
    end

    function UILib:CreateToggle(frame, text, default, callback)
        local state = default or false
        local container = Instance.new("Frame")
        container.Size = UDim2.new(1, -16, 0, 36)
        container.BackgroundTransparency = 1
        container.ZIndex = 5
        container.Parent = frame

        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, -48, 1, 0)
        label.BackgroundTransparency = 1
        label.Text = text
        label.TextColor3 = Theme.Text
        label.Font = Enum.Font.SourceSansSemibold
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.ZIndex = 5
        label.Parent = container

        local toggleFrame = Instance.new("Frame")
        toggleFrame.Size = UDim2.new(0, 40, 0, 20)
        toggleFrame.Position = UDim2.new(1, -40, 0.5, -10)
        toggleFrame.BackgroundColor3 = state and Theme.Purple or Theme.Secondary
        toggleFrame.ZIndex = 5
        toggleFrame.Parent = container

        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(1, 0)
        toggleCorner.Parent = toggleFrame

        local toggleDot = Instance.new("Frame")
        toggleDot.Size = UDim2.new(0, 16, 0, 16)
        toggleDot.Position = state and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
        toggleDot.BackgroundColor3 = Color3.new(1, 1, 1)
        toggleDot.ZIndex = 5
        toggleDot.Parent = toggleFrame

        local dotCorner = Instance.new("UICorner")
        dotCorner.CornerRadius = UDim.new(1, 0)
        dotCorner.Parent = toggleDot

        local stroke = Instance.new("UIStroke")
        stroke.Thickness = 1.5
        stroke.Color = Theme.Stroke
        stroke.Transparency = 0.6
        stroke.Parent = toggleFrame

        toggleFrame.InputBegan:Connect(
            function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    state = not state
                    Tween(
                        toggleDot,
                        {Position = state and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)},
                        0.15
                    )
                    Tween(toggleFrame, {BackgroundColor3 = state and Theme.Purple or Theme.Secondary}, 0.15)
                    pcall(callback, state)
                end
            end
        )

        return container
    end

    function UILib:CreateSlider(frame, text, min, max, default, callback)
        local value = default or min
        local container = Instance.new("Frame")
        container.Size = UDim2.new(1, -16, 0, 64)
        container.BackgroundTransparency = 1
        container.ZIndex = 5
        container.Parent = frame

        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, -60, 0, 24)
        label.BackgroundTransparency = 1
        label.Text = text
        label.TextColor3 = Theme.Text
        label.Font = Enum.Font.SourceSansSemibold
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.ZIndex = 5
        label.Parent = container

        local valueLabel = Instance.new("TextLabel")
        valueLabel.Size = UDim2.new(0, 60, 0, 24)
        valueLabel.Position = UDim2.new(1, -60, 0, 0)
        valueLabel.BackgroundTransparency = 1
        valueLabel.Text = tostring(value)
        valueLabel.TextColor3 = Theme.Text
        valueLabel.Font = Enum.Font.SourceSansSemibold
        valueLabel.TextSize = 14
        valueLabel.TextXAlignment = Enum.TextXAlignment.Right
        valueLabel.ZIndex = 5
        valueLabel.Parent = container

        local track = Instance.new("Frame")
        track.Size = UDim2.new(1, 0, 0, 8)
        track.Position = UDim2.new(0, 0, 0, 36)
        track.BackgroundColor3 = Theme.Secondary
        track.ZIndex = 5
        track.Parent = container

        local trackCorner = Instance.new("UICorner")
        trackCorner.CornerRadius = UDim.new(1, 0)
        trackCorner.Parent = track

        local fill = Instance.new("Frame")
        fill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
        fill.BackgroundColor3 = Theme.Purple
        fill.ZIndex = 5
        fill.Parent = track

        local fillCorner = Instance.new("UICorner")
        fillCorner.CornerRadius = UDim.new(1, 0)
        fillCorner.Parent = fill

        local handle = Instance.new("Frame")
        handle.Size = UDim2.new(0, 18, 0, 18)
        handle.Position = UDim2.new(fill.Size.X.Scale, -9, 0.5, -9)
        handle.BackgroundColor3 = Color3.new(1, 1, 1)
        handle.ZIndex = 5
        handle.Parent = track

        local handleCorner = Instance.new("UICorner")
        handleCorner.CornerRadius = UDim.new(1, 0)
        handleCorner.Parent = handle

        local handleStroke = Instance.new("UIStroke")
        handleStroke.Thickness = 1.5
        handleStroke.Color = Theme.Stroke
        handleStroke.Transparency = 0.5
        handleStroke.Parent = handle

        local dragging = false
        local function updateSlider(input)
            local mousePos = input.Position.X
            local absolutePos = track.AbsolutePosition.X
            local absoluteSize = track.AbsoluteSize.X
            local percent = math.clamp((mousePos - absolutePos) / absoluteSize, 0, 1)
            value = math.round(min + (max - min) * percent)
            Tween(fill, {Size = UDim2.new(percent, 0, 1, 0)}, 0.1)
            Tween(handle, {Position = UDim2.new(percent, -9, 0.5, -9)}, 0.1)
            valueLabel.Text = tostring(value)
            pcall(callback, value)
        end

        track.InputBegan:Connect(
            function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    Tween(
                        handle,
                        {Size = UDim2.new(0, 20, 0, 20), Position = UDim2.new(fill.Size.X.Scale, -10, 0.5, -10)},
                        0.1
                    )
                    updateSlider(input)
                end
            end
        )

        UserInputService.InputEnded:Connect(
            function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and dragging then
                    dragging = false
                    Tween(
                        handle,
                        {Size = UDim2.new(0, 18, 0, 18), Position = UDim2.new(fill.Size.X.Scale, -9, 0.5, -9)},
                        0.1
                    )
                end
            end
        )

        UserInputService.InputChanged:Connect(
            function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    updateSlider(input)
                end
            end
        )

        return container
    end

    function UILib:CreateDropdown(frame, text, options, default, callback)
        local selected = default or options[1]
        local container = Instance.new("Frame")
        container.Size = UDim2.new(1, -16, 0, 36)
        container.BackgroundTransparency = 1
        container.ZIndex = 5
        container.Parent = frame

        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, -120, 1, 0)
        label.BackgroundTransparency = 1
        label.Text = text
        label.TextColor3 = Theme.Text
        label.Font = Enum.Font.SourceSansSemibold
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.ZIndex = 5
        label.Parent = container

        local dropdownButton = Instance.new("TextButton")
        dropdownButton.Size = UDim2.new(0, 120, 0, 28)
        dropdownButton.Position = UDim2.new(1, -120, 0.5, -14)
        dropdownButton.BackgroundColor3 = Theme.Secondary
        dropdownButton.Text = selected
        dropdownButton.TextColor3 = Theme.Text
        dropdownButton.Font = Enum.Font.SourceSansSemibold
        dropdownButton.TextSize = 14
        dropdownButton.AutoButtonColor = false
        dropdownButton.ZIndex = 5
        dropdownButton.Parent = container

        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 6)
        buttonCorner.Parent = dropdownButton

        local stroke = Instance.new("UIStroke")
        stroke.Thickness = 1.5
        stroke.Color = Theme.Stroke
        stroke.Transparency = 0.6
        stroke.Parent = dropdownButton

        local dropdownMenu = Instance.new("Frame")
        dropdownMenu.Size = UDim2.new(0, 120, 0, 0)
        dropdownMenu.Position = UDim2.new(1, -120, 0.5, 14)
        dropdownMenu.BackgroundColor3 = Theme.Secondary
        dropdownMenu.BorderSizePixel = 0
        dropdownMenu.ClipsDescendants = true
        dropdownMenu.Visible = false
        dropdownMenu.ZIndex = 10
        dropdownMenu.Parent = container

        local menuCorner = Instance.new("UICorner")
        menuCorner.CornerRadius = UDim.new(0, 6)
        menuCorner.Parent = dropdownMenu

        local menuStroke = Instance.new("UIStroke")
        menuStroke.Thickness = 1.5
        menuStroke.Color = Theme.Stroke
        menuStroke.Transparency = 0.6
        menuStroke.Parent = dropdownMenu

        local menuLayout = Instance.new("UIListLayout")
        menuLayout.SortOrder = Enum.SortOrder.LayoutOrder
        menuLayout.Padding = UDim.new(0, 4)
        menuLayout.Parent = dropdownMenu

        local isOpen = false
        local lastInteraction = tick()
        local function applyZIndexAndBlur(container, apply)
            for _, child in ipairs(frame:GetChildren()) do
                if child:IsA("Frame") and child ~= container then
                    local newZIndex = apply and 1 or 5
                    child.ZIndex = newZIndex
                    for _, descendant in ipairs(child:GetDescendants()) do
                        if descendant:IsA("GuiObject") then
                            descendant.ZIndex = newZIndex
                        end
                    end
                    local blurOverlay = child:FindFirstChild("BlurOverlay")
                    if apply then
                        if not blurOverlay then
                            blurOverlay = Instance.new("Frame")
                            blurOverlay.Name = "BlurOverlay"
                            blurOverlay.Size = UDim2.new(1, 0, 1, 0)
                            blurOverlay.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
                            blurOverlay.BackgroundTransparency = 0.85
                            blurOverlay.ZIndex = newZIndex + 1
                            blurOverlay.Parent = child
                        end
                    elseif blurOverlay then
                        blurOverlay:Destroy()
                    end
                end
            end
        end

        local function toggleDropdown()
            isOpen = not isOpen
            lastInteraction = tick()
            local menuHeight = isOpen and (#options * 28 + (#options - 1) * 4) or 0
            local targetSize = UDim2.new(0, 120, 0, menuHeight)
            dropdownMenu.Visible = true
            container.ZIndex = isOpen and 10 or 5
            for _, descendant in ipairs(container:GetDescendants()) do
                if descendant:IsA("GuiObject") then
                    descendant.ZIndex = isOpen and 10 or 5
                end
            end
            Tween(dropdownMenu, {Size = targetSize}, 0.25, Enum.EasingStyle.Sine)
            applyZIndexAndBlur(container, isOpen)
            if not isOpen then
                task.spawn(
                    function()
                        while tick() - lastInteraction < 1 do
                            task.wait()
                        end
                        if not isOpen then
                            dropdownMenu.Visible = false
                            applyZIndexAndBlur(container, false)
                        end
                    end
                )
            end
        end

        for _, option in ipairs(options) do
            local optionButton = Instance.new("TextButton")
            optionButton.Size = UDim2.new(1, 0, 0, 28)
            optionButton.BackgroundColor3 = Theme.Secondary
            optionButton.Text = option
            optionButton.TextColor3 = Theme.Text
            optionButton.Font = Enum.Font.SourceSansSemibold
            optionButton.TextSize = 14
            optionButton.AutoButtonColor = false
            optionButton.ZIndex = 10
            optionButton.Parent = dropdownMenu

            local optionCorner = Instance.new("UICorner")
            optionCorner.CornerRadius = UDim.new(0, 6)
            optionCorner.Parent = optionButton

            optionButton.MouseEnter:Connect(
                function()
                    Tween(optionButton, {BackgroundColor3 = Theme.Highlight}, 0.1)
                end
            )

            optionButton.MouseLeave:Connect(
                function()
                    Tween(optionButton, {BackgroundColor3 = Theme.Secondary}, 0.1)
                end
            )

            optionButton.MouseButton1Click:Connect(
                function()
                    selected = option
                    dropdownButton.Text = selected
                    lastInteraction = tick()
                    toggleDropdown()
                    pcall(callback, selected)
                end
            )
        end

        dropdownButton.MouseButton1Click:Connect(toggleDropdown)

        dropdownButton.MouseEnter:Connect(
            function()
                Tween(dropdownButton, {BackgroundColor3 = Theme.Highlight}, 0.1)
            end
        )

        dropdownButton.MouseLeave:Connect(
            function()
                Tween(dropdownButton, {BackgroundColor3 = Theme.Secondary}, 0.1)
            end
        )

        return container
    end

    function UILib:CreateColorPicker(frame, text, default, callback)
        local h, s, v
        if default then
            h, s, v = default:ToHSV()
        else
            h, s, v = 0, 1, 1
        end
        local selectedColor = default or Color3.new(1, 1, 1)
        local container = Instance.new("Frame")
        container.Size = UDim2.new(1, -16, 0, 36)
        container.BackgroundTransparency = 1
        container.ZIndex = 5
        container.Parent = frame

        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, -48, 1, 0)
        label.BackgroundTransparency = 1
        label.Text = text
        label.TextColor3 = Theme.Text
        label.Font = Enum.Font.SourceSansSemibold
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.ZIndex = 5
        label.Parent = container

        local colorButton = Instance.new("TextButton")
        colorButton.Size = UDim2.new(0, 40, 0, 20)
        colorButton.Position = UDim2.new(1, -40, 0.5, -10)
        colorButton.BackgroundColor3 = selectedColor
        colorButton.Text = ""
        colorButton.AutoButtonColor = false
        colorButton.ZIndex = 5
        colorButton.Parent = container

        local colorCorner = Instance.new("UICorner")
        colorCorner.CornerRadius = UDim.new(0, 6)
        colorCorner.Parent = colorButton

        local colorStroke = Instance.new("UIStroke")
        colorStroke.Thickness = 1.5
        colorStroke.Color = Theme.Stroke
        colorStroke.Transparency = 0.6
        colorStroke.Parent = colorButton

        local colorMenu = Instance.new("Frame")
        colorMenu.Size = UDim2.new(0, 180, 0, 0)
        colorMenu.Position = UDim2.new(1, -180, 0.5, 14)
        colorMenu.BackgroundColor3 = Theme.Secondary
        colorMenu.BorderSizePixel = 0
        colorMenu.ClipsDescendants = true
        colorMenu.Visible = false
        colorMenu.ZIndex = 10
        colorMenu.Parent = container

        local menuCorner = Instance.new("UICorner")
        menuCorner.CornerRadius = UDim.new(0, 6)
        menuCorner.Parent = colorMenu

        local menuStroke = Instance.new("UIStroke")
        menuStroke.Thickness = 1.5
        menuStroke.Color = Theme.Stroke
        menuStroke.Transparency = 0.6
        menuStroke.Parent = colorMenu

        local wheel = Instance.new("ImageButton")
        wheel.Size = UDim2.new(0, 110, 0, 110)
        wheel.Position = UDim2.new(0, 12, 0, 12)
        wheel.BackgroundTransparency = 1
        wheel.Image = "rbxassetid://6020299385"
        wheel.ZIndex = 10
        wheel.Parent = colorMenu

        local wheelIndicator = Instance.new("Frame")
        wheelIndicator.Size = UDim2.new(0, 8, 0, 8)
        wheelIndicator.BackgroundColor3 = Color3.new(1, 1, 1)
        wheelIndicator.BorderSizePixel = 0
        wheelIndicator.ZIndex = 10
        wheelIndicator.Parent = wheel
        local wheelCorner = Instance.new("UICorner")
        wheelCorner.CornerRadius = UDim.new(1, 0)
        wheelCorner.Parent = wheelIndicator

        local valueSlider = Instance.new("Frame")
        valueSlider.Size = UDim2.new(0, 24, 0, 110)
        valueSlider.Position = UDim2.new(0, 136, 0, 12)
        valueSlider.BackgroundColor3 = Theme.Secondary
        valueSlider.ZIndex = 10
        valueSlider.Parent = colorMenu

        local valueGradient = Instance.new("UIGradient")
        valueGradient.Color =
            ColorSequence.new(
            {
                ColorSequenceKeypoint.new(0, Color3.new(0, 0, 0)),
                ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1))
            }
        )
        valueGradient.Rotation = 90
        valueGradient.Parent = valueSlider

        local valueCorner = Instance.new("UICorner")
        valueCorner.CornerRadius = UDim.new(0, 6)
        valueCorner.Parent = valueSlider

        local valueHandle = Instance.new("Frame")
        valueHandle.Size = UDim2.new(1, 0, 0, 5)
        valueHandle.Position = UDim2.new(0, 0, 1 - v, -2.5)
        valueHandle.BackgroundColor3 = Theme.Purple
        valueHandle.ZIndex = 10
        valueHandle.Parent = valueSlider

        local handleCorner = Instance.new("UICorner")
        handleCorner.CornerRadius = UDim.new(0, 6)
        handleCorner.Parent = valueHandle

        local isOpen = false
        local lastInteraction = tick()
        local function applyZIndexAndBlur(container, apply)
            for _, child in ipairs(frame:GetChildren()) do
                if child:IsA("Frame") and child ~= container then
                    local newZIndex = apply and 1 or 5
                    child.ZIndex = newZIndex
                    for _, descendant in ipairs(child:GetDescendants()) do
                        if descendant:IsA("GuiObject") then
                            descendant.ZIndex = newZIndex
                        end
                    end
                    local blurOverlay = child:FindFirstChild("BlurOverlay")
                    if apply then
                        if not blurOverlay then
                            blurOverlay = Instance.new("Frame")
                            blurOverlay.Name = "BlurOverlay"
                            blurOverlay.Size = UDim2.new(1, 0, 1, 0)
                            blurOverlay.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
                            blurOverlay.BackgroundTransparency = 0.85
                            blurOverlay.ZIndex = newZIndex + 1
                            blurOverlay.Parent = child
                        end
                    elseif blurOverlay then
                        blurOverlay:Destroy()
                    end
                end
            end
        end

        local function toggleColorMenu()
            isOpen = not isOpen
            lastInteraction = tick()
            local menuHeight = isOpen and 134 or 0
            local targetSize = UDim2.new(0, 180, 0, menuHeight)
            colorMenu.Visible = true
            container.ZIndex = isOpen and 10 or 5
            for _, descendant in ipairs(container:GetDescendants()) do
                if descendant:IsA("GuiObject") then
                    descendant.ZIndex = isOpen and 10 or 5
                end
            end
            Tween(colorMenu, {Size = targetSize}, 0.25, Enum.EasingStyle.Sine)
            applyZIndexAndBlur(container, isOpen)
            if not isOpen then
                task.spawn(
                    function()
                        while tick() - lastInteraction < 0.5 do
                            task.wait()
                        end
                        if not isOpen then
                            colorMenu.Visible = false
                            applyZIndexAndBlur(container, false)
                        end
                    end
                )
            end
        end

        local function updateColor()
            selectedColor = HSVToRGB(h, s, v)
            colorButton.BackgroundColor3 = selectedColor
            pcall(callback, selectedColor)
        end

        wheel.InputBegan:Connect(
            function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    lastInteraction = tick()
                    local center = wheel.AbsolutePosition + wheel.AbsoluteSize / 2
                    local mousePos = Vector2.new(input.Position.X, input.Position.Y)
                    local delta = mousePos - center
                    local distance = delta.Magnitude / (wheel.AbsoluteSize.X / 2)
                    if distance <= 1 then
                        s = math.clamp(distance, 0, 1)
                        h = math.atan2(delta.Y, delta.X) / (2 * math.pi)
                        if h < 0 then
                            h = h + 1
                        end
                        local indicatorX = delta.X - 4
                        local indicatorY = delta.Y - 4
                        wheelIndicator.Position = UDim2.new(0.5, indicatorX, 0.5, indicatorY)
                        updateColor()
                    end
                end
            end
        )

        wheel.InputChanged:Connect(
            function(input)
                if
                    input.UserInputType == Enum.UserInputType.MouseMovement and
                        UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                 then
                    lastInteraction = tick()
                    local center = wheel.AbsolutePosition + wheel.AbsoluteSize / 2
                    local mousePos = Vector2.new(input.Position.X, input.Position.Y)
                    local delta = mousePos - center
                    local distance = delta.Magnitude / (wheel.AbsoluteSize.X / 2)
                    if distance <= 1 then
                        s = math.clamp(distance, 0, 1)
                        h = math.atan2(delta.Y, delta.X) / (2 * math.pi)
                        if h < 0 then
                            h = h + 1
                        end
                        local indicatorX = delta.X - 4
                        local indicatorY = delta.Y - 4
                        wheelIndicator.Position = UDim2.new(0.5, indicatorX, 0.5, indicatorY)
                        updateColor()
                    end
                end
            end
        )

        valueSlider.InputBegan:Connect(
            function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    lastInteraction = tick()
                    local mouseY = input.Position.Y
                    local sliderTop = valueSlider.AbsolutePosition.Y
                    local sliderHeight = valueSlider.AbsoluteSize.Y
                    v = math.clamp((mouseY - sliderTop) / sliderHeight, 0, 1)
                    valueHandle.Position = UDim2.new(0, 0, v, -2.5)
                    updateColor()
                end
            end
        )

        valueSlider.InputChanged:Connect(
            function(input)
                if
                    input.UserInputType == Enum.UserInputType.MouseMovement and
                        UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                 then
                    lastInteraction = tick()
                    local mouseY = input.Position.Y
                    local sliderTop = valueSlider.AbsolutePosition.Y
                    local sliderHeight = valueSlider.AbsoluteSize.Y
                    v = math.clamp((mouseY - sliderTop) / sliderHeight, 0, 1)
                    valueHandle.Position = UDim2.new(0, 0, v, -2.5)
                    updateColor()
                end
            end
        )

        colorButton.MouseButton1Click:Connect(toggleColorMenu)

        colorButton.MouseEnter:Connect(
            function()
                Tween(colorButton, {BackgroundColor3 = selectedColor:Lerp(Theme.Highlight, 0.2)}, 0.1)
            end
        )

        colorButton.MouseLeave:Connect(
            function()
                Tween(colorButton, {BackgroundColor3 = selectedColor}, 0.1)
            end
        )

        return container
    end

    function UILib:CreateTextInput(frame, text, default, callback)
        local container = Instance.new("Frame")
        container.Size = UDim2.new(1, -16, 0, 36)
        container.BackgroundTransparency = 1
        container.ZIndex = 5
        container.Parent = frame

        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, -120, 1, 0)
        label.BackgroundTransparency = 1
        label.Text = text
        label.TextColor3 = Theme.Text
        label.Font = Enum.Font.SourceSansSemibold
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.ZIndex = 5
        label.Parent = container

        local textBox = Instance.new("TextBox")
        textBox.Size = UDim2.new(0, 120, 0, 28)
        textBox.Position = UDim2.new(1, -120, 0.5, -14)
        textBox.BackgroundColor3 = Theme.Secondary
        textBox.Text = default or ""
        textBox.TextColor3 = Theme.Text
        textBox.Font = Enum.Font.SourceSansSemibold
        textBox.TextSize = 14
        textBox.TextXAlignment = Enum.TextXAlignment.Left
        textBox.ClearTextOnFocus = false
        textBox.ZIndex = 5
        textBox.Parent = container

        local textCorner = Instance.new("UICorner")
        textCorner.CornerRadius = UDim.new(0, 6)
        textCorner.Parent = textBox

        local textStroke = Instance.new("UIStroke")
        textStroke.Thickness = 1.5
        textStroke.Color = Theme.Stroke
        textStroke.Transparency = 0.6
        textStroke.Parent = textBox

        textBox.FocusLost:Connect(
            function(enterPressed)
                if enterPressed then
                    pcall(callback, textBox.Text)
                end
            end
        )

        textBox.MouseEnter:Connect(
            function()
                Tween(textBox, {BackgroundColor3 = Theme.Highlight}, 0.1)
            end
        )

        textBox.MouseLeave:Connect(
            function()
                Tween(textBox, {BackgroundColor3 = Theme.Secondary}, 0.1)
            end
        )

        return container
    end

    local UI = UILib:CreateWindow("Holy's Services")
    local MainTab = UI:CreateTab("Main")

    local Players = game:GetService("Players")
    local lp = Players.LocalPlayer

    local UserInputService = game:GetService("UserInputService")

    local dur = 0.72
    local holding = false
    local toggleEnabled = false
    local connection

    local function onInputBegan(input, gameProcessed)
        if gameProcessed or holding then
            return
        end
        if
            (input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.E) or
                (input.UserInputType == Enum.UserInputType.Gamepad1 and input.KeyCode == Enum.KeyCode.ButtonX)
         then
            holding = true
            keypress(0x45)
            wait(dur)
            keyrelease(0x45)
            holding = false
        end
    end

    local toggle1 =
        UILib:CreateToggle(
        MainTab.Frame,
        "Enable Auto Perfect",
        false,
        function(state)
            toggleEnabled = state
            if toggleEnabled then
                connection = UserInputService.InputBegan:Connect(onInputBegan)
            else
                if connection then
                    connection:Disconnect()
                    connection = nil
                end
            end
        end
    )
    toggle1.LayoutOrder = 1

    local sounds = {
        ["Default"] = "15035753447",
        ["Green Light"] = "7596288191",
        ["Coin"] = "6988710942",
        ["Shot"] = "127793374596820",
        ["Flame"] = "4403634269",
        ["Bang"] = "96437383266333",
        ["Ice"] = "632831227"
    }

    local function getKeys(tbl)
        local keys = {}
        for k in pairs(tbl) do
            table.insert(keys, k)
        end
        return keys
    end

    local function getSound()
        local char = lp.Character or workspace:FindFirstChild(lp.Name)
        if not char then
            return nil
        end
        local greenSound = char:FindFirstChild("GreenSound")
        if not greenSound then
            return nil
        end
        local sound = greenSound:FindFirstChild("WomboCombo")
        return sound
    end

    local dropdown1 =
        UILib:CreateDropdown(
        MainTab.Frame,
        "Select Green Sound",
        getKeys(sounds),
        "Default",
        function(value)
            local selectedId = sounds[value]
            local sound = getSound()
            if sound and selectedId then
                sound.SoundId = "rbxassetid://" .. selectedId
            end
        end
    )
    dropdown1.LayoutOrder = 1
else
    print("FAILED LOADING SCRIPT... ❌")
end
